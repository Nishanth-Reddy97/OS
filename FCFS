#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10

// Define the Process structure
struct Process {
    int pid;               // Process ID
    int arrival_time;      // Arrival Time (AT)
    int burst_time;        // Burst Time (BT)
    int completion_time;   // Completion Time (CT)
    int turnaround_time;   // Turnaround Time (TAT)
    int waiting_time;      // Waiting Time (WT)
    int response_time;     // Response Time (RT)
};

// Function to compare processes based on arrival time (for sorting)
int compareArrivalTime(const void *a, const void *b) {
    struct Process *p1 = (struct Process *)a;
    struct Process *p2 = (struct Process *)b;
    return p1->arrival_time - p2->arrival_time;
}

void calculateFCFS(struct Process processes[], int num_processes) {
    int total_wt = 0, total_tat = 0, total_rt = 0;

    // First process starts execution as soon as it arrives
    processes[0].completion_time = processes[0].arrival_time + processes[0].burst_time;
    processes[0].turnaround_time = processes[0].completion_time - processes[0].arrival_time;
    processes[0].waiting_time = processes[0].turnaround_time - processes[0].burst_time;
    processes[0].response_time = processes[0].waiting_time; // First process

    total_wt += processes[0].waiting_time;
    total_tat += processes[0].turnaround_time;
    total_rt += processes[0].response_time;

    // Calculate for subsequent processes
    for (int i = 1; i < num_processes; i++) {
        // If the process arrives after the previous process finishes, we can start it immediately
        if (processes[i].arrival_time > processes[i - 1].completion_time) {
            processes[i].completion_time = processes[i].arrival_time + processes[i].burst_time;
        } else {
            processes[i].completion_time = processes[i - 1].completion_time + processes[i].burst_time;
        }

        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
        processes[i].response_time = processes[i].waiting_time; // In FCFS, RT = WT

        total_wt += processes[i].waiting_time;
        total_tat += processes[i].turnaround_time;
        total_rt += processes[i].response_time;
    }

    // Output the results
    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\tResponse Time\n");
    for (int i = 0; i < num_processes; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].pid,
               processes[i].arrival_time,
               processes[i].burst_time,
               processes[i].completion_time,
               processes[i].turnaround_time,
               processes[i].waiting_time,
               processes[i].response_time);
    }

    // Output the averages
    printf("\nAverage Waiting Time: %.2f\n", (float)total_wt / num_processes);
    printf("Average Turnaround Time: %.2f\n", (float)total_tat / num_processes);
    printf("Average Response Time: %.2f\n", (float)total_rt / num_processes);
}

int main() {
    int num_processes;

    // Ask for the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);

    if (num_processes > MAX_PROCESSES) {
        printf("Cannot enter more than %d processes.\n", MAX_PROCESSES);
        return 1;
    }

    struct Process processes[num_processes];

    // Input process details
    for (int i = 0; i < num_processes; i++) {
        processes[i].pid = i + 1; // Set process ID as i+1 (starting from 1)
        printf("\nEnter details for Process %d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
    }

    // Sort the processes by arrival time
    qsort(processes, num_processes, sizeof(struct Process), compareArrivalTime);

    // Call FCFS function to calculate and display the results
    calculateFCFS(processes, num_processes);

    return 0;
}
